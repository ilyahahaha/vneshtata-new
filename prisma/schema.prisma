generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Companies {
  Yandex
  VK
  AlfaBank
  Tinkoff
  Sber
  MTS
  Rostelecom
}

model User {
  id                  String       @id @unique @default(uuid())
  profileId           String       @unique
  firstName           String
  lastName            String
  email               String       @unique
  profile             Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  previousEmployments Employment[]
  followedBy          Follows[]    @relation("following")
  following           Follows[]    @relation("follower")
  hashedPassword      String
  picture             String?
  createdAt           DateTime     @default(now())
  sentMessages        Message[]    @relation("sentMessages")
  receivedMessages    Message[]    @relation("receivedMessages")
  posts               Post[]
  likedPosts          Likes[]
  commentedPosts      Comment[]
}

model Profile {
  id        String  @id @default(cuid())
  user      User?   @relation()
  userId    String?
  status    String?
  position  String?
  company   String?
  country   String  @default("Не выбрано")
  education String?
  about     String?
}

model Employment {
  id             String    @id @default(cuid())
  employee       User?     @relation(fields: [employeeUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeUserId String?
  company        Companies
  position       String
  employedOn     DateTime
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation(name: "sentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   String
  receiver   User     @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String
  content    String
  sentAt     DateTime @default(now())
}

model Post {
  id        String    @id @default(uuid())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  content   String
  likes     Likes[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
  createdAt DateTime @default(now())
}

model Likes {
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likedBy   User   @relation(fields: [likedById], references: [id], onDelete: Cascade)
  likedById String

  @@id([postId, likedById])
}
